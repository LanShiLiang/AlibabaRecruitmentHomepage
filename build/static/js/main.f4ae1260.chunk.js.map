{"version":3,"sources":["jobScroll.js","App.js","serviceWorker.js","index.js"],"names":["Jobs","props","timeId","ulEl","useRef","scrollContainer","useEffect","scroll","speed","style","display","justifyContent","alignItems","height","padding","fontSize","fontWeight","color","user","to","path","ref","overflow","onMouseOver","e","clearInterval","onMouseLeave","List","map","it","key","id","position","left","city","time","setInterval","current","scrollTop","scrollHeight","list","App","className","src","alt","type","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f4ae1260.chunk.js","sourcesContent":["import React,{useRef, useEffect} from 'react'\nimport { Link } from 'react-router-dom'\nimport { List } from \"react-virtualized\";\n\nexport default function Jobs(props) {\n  let ulEl = useRef()\n  let scrollContainer = useRef()\n  let timeId\n    useEffect(() => {\n      scroll(props.speed)\n    }, [])\n  return (\n    <div>\n      <div style={\n            {display: 'flex',\n            justifyContent:'space-between',\n            alignItems:'center',\n            height: '50px',\n            padding: '0 10px',\n            fontSize: 'small',\n            fontWeight:'bold',\n            color: 'rgb(121,136,155)'\n            }}>\n        <div>{props.user}</div>\n        <Link to={props.path}>更多</Link>\n      </div>\n      <div ref={scrollContainer} style={{ height:props.height, overflow: 'hidden' }} onMouseOver={handleMouseOver} onMouseLeave={handleMouseOut}>\n        <ul ref={ulEl}>\n          {\n            props.List.map(it =>\n              <li key={it.id}>\n                <Link>{it.position}</Link>\n                <div style={{position: 'absolute',left: '55%'}}>{it.city}</div>\n                <div>{it.time}</div>\n              </li>)\n          }\n          {\n            props.List.map(it =>\n              <li key={it.id}>\n                <Link>{it.position}</Link>\n                <div style={{position: 'absolute',left: '55%'}}>{it.city}</div>\n                <div>{it.time}</div>\n              </li>)\n          }\n          <List></List>\n        </ul>\n      </div>\n    </div>\n  )\n\n  function scroll(speed) {\n    timeId= setInterval(() => {\n      scrollContainer.current.scrollTop++\n      if (scrollContainer.current.scrollTop >= ulEl.current.scrollHeight/2) {\n        scrollContainer.current.scrollTop= 0\n      }\n    }, speed)\n  }\n\n  function handleMouseOver(e) {\n    clearInterval(timeId)\n  }\n\n  function handleMouseOut(e) {\n    scroll(props.speed)\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport {\n  HashRouter as Router,\n  Link\n} from 'react-router-dom'\nimport JobScroll from './jobScroll'\n\n//以下list列表数据是本要通过请求返回的JSON数据的解析结果\nvar list = [{\n  id:1,\n  position: '1蚂蚁集团-城市经理（商业线）-华东区-支付宝',\n  city: '杭州',\n  time:'27分钟前',\n}, {\n  id:2,\n  position: '2钉钉(DingTalk)-（高级）前端技术专家-用户产品技术',\n  city: '杭州，北京',\n  time:'27分钟前',\n  }, {\n  id:3,\n  position: '3阿里云智能-仿真算法专家-北京/杭州',\n  city: '杭州，北京',\n  time:'27分钟前',\n}, {\n  id:4,\n  position: '4钉钉(DingTalk)-（高级）前端技术专家-用户产品技术',\n  city: '杭州，北京',\n  time:'27分钟前',\n  }, {\n  id:5,\n  position: '5阿里云智能-仿真算法专家-北京/杭州',\n  city: '杭州，北京',\n  time:'27分钟前',\n}, {\n  id:6,\n  position: '6钉钉(DingTalk)-（高级）前端技术专家-用户产品技术',\n  city: '杭州，北京',\n  time:'27分钟前',\n  }, {\n  id:7,\n  position: '7阿里云智能-仿真算法专家-北京/杭州',\n  city: '杭州，北京',\n  time:'27分钟前',\n}, {\n  id: 8,\n  position: '8阿里云智能-仿真算法专家-北京/杭州',\n  city: '杭州，北京',\n  time: '27分钟前',\n}, {\n  id: 9,\n  position: '9阿里云智能-仿真算法专家-北京/杭州',\n  city: '杭州，北京',\n  time: '27分钟前',\n}, {\n  id: 10,\n  position: '10阿里云智能-仿真算法专家-北京/杭州',\n  city: '杭州，北京',\n  time: '27分钟前',\n},{\n  id: 11,\n  position: '11阿里云智能-仿真算法专家-北京/杭州',\n  city: '杭州，北京',\n  time: '27分钟前',\n}]\n\n//以下利用router做前端路由跳转，因为没有后端配合，这里只做示意\nfunction App() {\n  return (\n    <Router>\n      <header>\n        <div className='header-width'>\n        <div>\n          <img src=\"https://img.alicdn.com/tfs/TB1Zv8_lxSYBuNjSspjXXX73VXa-390-63.png\" alt=\"logo\"/>\n          <span>  |  社招官网</span>\n        </div>\n        <div id=\"header-links\">\n          <Link>首 页</Link>\n          <Link>社会招聘</Link>\n          <Link>校园招聘</Link>\n          <Link>了解阿里</Link>\n          <Link>个人中心</Link>\n        </div>\n        <div id=\"header-links-right\">\n          <span>欢迎来到阿里巴巴集团招聘！</span>\n          <Link>登录 |</Link>\n          <Link> 注册</Link>\n        </div>\n        </div>\n      </header>\n      <main>\n        <span></span>\n        <div id=\"slogan\">\n          <div>\n            If not now, when?\n          </div>\n          <div>\n            If not me, who?\n          </div>\n          <div>\n            此时此刻，非我莫属!\n          </div>\n        </div>\n        <div>\n          <form>\n            <div id=\"cover-form\"></div>\n            <input type=\"text\" placeholder=\"请输入职位关键词\"/>\n            <button>搜索</button>\n          </form>\n          <div>\n            <span>热门搜索：</span>\n            <Link>IOS</Link>\n            <Link>数据</Link>\n            <Link>安全</Link>\n            <Link>搜索</Link>\n            <Link>算法</Link>\n            <Link>运营</Link>\n            <Link>视觉</Link>\n            <Link>交互</Link>\n            <Link>前端</Link>\n          </div>\n        </div>\n      </main>\n      <footer>\n        <JobScroll List={list} user=\"最新职位\" height=\"250px\" path=\"\" speed=\"30\"></JobScroll>\n        <div>\n          <div>\n            <img src=\"https://img.alicdn.com/tfs/TB1SbxarYj1gK0jSZFOXXc7GpXa-2546-848.png\" alt=\"阿里云\" />\n          </div>\n          <div>\n            <img src=\"https://img.alicdn.com/tfs/TB18tFCCH2pK1RjSZFsXXaNlXXa-240-34.svg\" alt=\"企业智能\"/>\n          </div>\n        </div>\n      </footer>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}